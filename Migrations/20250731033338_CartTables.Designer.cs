// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dotnet_basic.Models;

#nullable disable

namespace dotnet_basic.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250731033338_CartTables")]
    partial class CartTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.6");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("dotnet_basic.Models.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("dotnet_basic.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AdSoyad")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("dotnet_basic.Models.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CartId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("dotnet_basic.Models.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CartId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Miktar")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UrunId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("UrunId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("dotnet_basic.Models.Kategori", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("KategoriAdi")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Kategoriler");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            KategoriAdi = "Telefon",
                            Url = "telefon"
                        },
                        new
                        {
                            Id = 2,
                            KategoriAdi = "Elektronik",
                            Url = "elektronik"
                        },
                        new
                        {
                            Id = 3,
                            KategoriAdi = "Beyaz Eşya",
                            Url = "beyaz-esya"
                        },
                        new
                        {
                            Id = 4,
                            KategoriAdi = "Giyim",
                            Url = "giyim"
                        },
                        new
                        {
                            Id = 5,
                            KategoriAdi = "Kozmetik",
                            Url = "kozmetik"
                        },
                        new
                        {
                            Id = 6,
                            KategoriAdi = "Saat",
                            Url = "saat"
                        },
                        new
                        {
                            Id = 7,
                            KategoriAdi = "Araba",
                            Url = "araba"
                        },
                        new
                        {
                            Id = 8,
                            KategoriAdi = "Kitap",
                            Url = "kitap"
                        },
                        new
                        {
                            Id = 9,
                            KategoriAdi = "Mobilya",
                            Url = "mobilya"
                        });
                });

            modelBuilder.Entity("dotnet_basic.Models.Slider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Aciklama")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Aktif")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Baslik")
                        .HasColumnType("TEXT");

                    b.Property<int>("Index")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Resim")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Sliderlar");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Aciklama = "Slider 1 Aciklama",
                            Aktif = true,
                            Baslik = "Slider Başlık 1",
                            Index = 0,
                            Resim = "Slider-1.jpeg"
                        },
                        new
                        {
                            Id = 2,
                            Aciklama = "Slider 2 Aciklama",
                            Aktif = true,
                            Baslik = "Slider Başlık 2",
                            Index = 1,
                            Resim = "Slider-2.jpeg"
                        },
                        new
                        {
                            Id = 3,
                            Aciklama = "Slider 3 Aciklama",
                            Aktif = true,
                            Baslik = "Slider Başlık 3",
                            Index = 2,
                            Resim = "Slider-3.jpeg"
                        });
                });

            modelBuilder.Entity("dotnet_basic.Models.Urun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Aciklama")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Aktif")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Anasayfa")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Fiyat")
                        .HasColumnType("REAL");

                    b.Property<int>("KategoriId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Resim")
                        .HasColumnType("TEXT");

                    b.Property<string>("UrunAdi")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("KategoriId");

                    b.ToTable("Urunler");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Aciklama = "NEDEN APPLE WATCH SE SATIN ALMALISINIZ? — Motive ve aktif olmanız, sağlık durumunuzu takip etmeniz, bağlantıda ve güvende kalmanız için gereken her şey bileğinizde. watchOS 11 daha fazla yapay öğrenme, kişiselleştirme ve bağlantı özellikleri sunuyor. Düşme Algılama ve gelişmiş antrenman ölçümleri gibi özelliklere sahip Apple Watch SE, harika bir fiyatla sunuluyor.",
                            Aktif = false,
                            Anasayfa = false,
                            Fiyat = 10000.0,
                            KategoriId = 6,
                            Resim = "1.jpeg",
                            UrunAdi = "Apple Watch 7"
                        },
                        new
                        {
                            Id = 2,
                            Aciklama = "NEDEN APPLE WATCH SE SATIN ALMALISINIZ? — Motive ve aktif olmanız, sağlık durumunuzu takip etmeniz, bağlantıda ve güvende kalmanız için gereken her şey bileğinizde. watchOS 11 daha fazla yapay öğrenme, kişiselleştirme ve bağlantı özellikleri sunuyor. Düşme Algılama ve gelişmiş antrenman ölçümleri gibi özelliklere sahip Apple Watch SE, harika bir fiyatla sunuluyor.",
                            Aktif = true,
                            Anasayfa = true,
                            Fiyat = 20000.0,
                            KategoriId = 6,
                            Resim = "2.jpeg",
                            UrunAdi = "Apple Watch 8"
                        },
                        new
                        {
                            Id = 3,
                            Aciklama = "NEDEN APPLE WATCH SE SATIN ALMALISINIZ? — Motive ve aktif olmanız, sağlık durumunuzu takip etmeniz, bağlantıda ve güvende kalmanız için gereken her şey bileğinizde. watchOS 11 daha fazla yapay öğrenme, kişiselleştirme ve bağlantı özellikleri sunuyor. Düşme Algılama ve gelişmiş antrenman ölçümleri gibi özelliklere sahip Apple Watch SE, harika bir fiyatla sunuluyor.",
                            Aktif = false,
                            Anasayfa = true,
                            Fiyat = 30000.0,
                            KategoriId = 6,
                            Resim = "3.jpeg",
                            UrunAdi = "Apple Watch 9"
                        },
                        new
                        {
                            Id = 4,
                            Aciklama = "NEDEN APPLE WATCH SE SATIN ALMALISINIZ? — Motive ve aktif olmanız, sağlık durumunuzu takip etmeniz, bağlantıda ve güvende kalmanız için gereken her şey bileğinizde. watchOS 11 daha fazla yapay öğrenme, kişiselleştirme ve bağlantı özellikleri sunuyor. Düşme Algılama ve gelişmiş antrenman ölçümleri gibi özelliklere sahip Apple Watch SE, harika bir fiyatla sunuluyor.",
                            Aktif = false,
                            Anasayfa = true,
                            Fiyat = 40000.0,
                            KategoriId = 6,
                            Resim = "4.jpeg",
                            UrunAdi = "Apple Watch 10"
                        },
                        new
                        {
                            Id = 5,
                            Aciklama = "NEDEN APPLE WATCH SE SATIN ALMALISINIZ? — Motive ve aktif olmanız, sağlık durumunuzu takip etmeniz, bağlantıda ve güvende kalmanız için gereken her şey bileğinizde. watchOS 11 daha fazla yapay öğrenme, kişiselleştirme ve bağlantı özellikleri sunuyor. Düşme Algılama ve gelişmiş antrenman ölçümleri gibi özelliklere sahip Apple Watch SE, harika bir fiyatla sunuluyor.",
                            Aktif = true,
                            Anasayfa = false,
                            Fiyat = 50000.0,
                            KategoriId = 6,
                            Resim = "5.jpeg",
                            UrunAdi = "Apple Watch 11"
                        },
                        new
                        {
                            Id = 6,
                            Aciklama = "NEDEN APPLE WATCH SE SATIN ALMALISINIZ? — Motive ve aktif olmanız, sağlık durumunuzu takip etmeniz, bağlantıda ve güvende kalmanız için gereken her şey bileğinizde. watchOS 11 daha fazla yapay öğrenme, kişiselleştirme ve bağlantı özellikleri sunuyor. Düşme Algılama ve gelişmiş antrenman ölçümleri gibi özelliklere sahip Apple Watch SE, harika bir fiyatla sunuluyor.",
                            Aktif = true,
                            Anasayfa = true,
                            Fiyat = 60000.0,
                            KategoriId = 6,
                            Resim = "6.jpeg",
                            UrunAdi = "Apple Watch 12"
                        },
                        new
                        {
                            Id = 7,
                            Aciklama = "NEDEN APPLE WATCH SE SATIN ALMALISINIZ? — Motive ve aktif olmanız, sağlık durumunuzu takip etmeniz, bağlantıda ve güvende kalmanız için gereken her şey bileğinizde. watchOS 11 daha fazla yapay öğrenme, kişiselleştirme ve bağlantı özellikleri sunuyor. Düşme Algılama ve gelişmiş antrenman ölçümleri gibi özelliklere sahip Apple Watch SE, harika bir fiyatla sunuluyor.",
                            Aktif = false,
                            Anasayfa = true,
                            Fiyat = 70000.0,
                            KategoriId = 6,
                            Resim = "7.jpeg",
                            UrunAdi = "Apple Watch 13"
                        },
                        new
                        {
                            Id = 8,
                            Aciklama = "NEDEN APPLE WATCH SE SATIN ALMALISINIZ? — Motive ve aktif olmanız, sağlık durumunuzu takip etmeniz, bağlantıda ve güvende kalmanız için gereken her şey bileğinizde. watchOS 11 daha fazla yapay öğrenme, kişiselleştirme ve bağlantı özellikleri sunuyor. Düşme Algılama ve gelişmiş antrenman ölçümleri gibi özelliklere sahip Apple Watch SE, harika bir fiyatla sunuluyor.",
                            Aktif = true,
                            Anasayfa = false,
                            Fiyat = 80000.0,
                            KategoriId = 6,
                            Resim = "8.jpeg",
                            UrunAdi = "Apple Watch 14"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("dotnet_basic.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("dotnet_basic.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("dotnet_basic.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("dotnet_basic.Models.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnet_basic.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("dotnet_basic.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("dotnet_basic.Models.CartItem", b =>
                {
                    b.HasOne("dotnet_basic.Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dotnet_basic.Models.Urun", "Urun")
                        .WithMany()
                        .HasForeignKey("UrunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Urun");
                });

            modelBuilder.Entity("dotnet_basic.Models.Urun", b =>
                {
                    b.HasOne("dotnet_basic.Models.Kategori", "Kategori")
                        .WithMany("Uruns")
                        .HasForeignKey("KategoriId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kategori");
                });

            modelBuilder.Entity("dotnet_basic.Models.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("dotnet_basic.Models.Kategori", b =>
                {
                    b.Navigation("Uruns");
                });
#pragma warning restore 612, 618
        }
    }
}
